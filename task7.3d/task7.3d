import RPi.GPIO as GPIO
import time

# Initialize GPIO
GPIO.setmode(GPIO.BCM)

# Pins for Ultrasonic Sensor
TRIG = 18
ECHO = 24

# Pin for BUZZ
BUZZ_PIN = 17

# Setup GPIO pins
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(BUZZ_PIN, GPIO.OUT)

# Initialize PWM on BUZZ_PIN with 100Hz frequency
pwm = GPIO.PWM(BUZZ_PIN, 100)
pwm.start(0)  # Start with 0% duty cycle (off)

# Function to measure distance using Ultrasonic sensor
def measure_distance():
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)
    
    start_time = time.time()
    stop_time = time.time()
    
    while GPIO.input(ECHO) == 0:
        start_time = time.time()
        
    while GPIO.input(ECHO) == 1:
        stop_time = time.time()
        
    elapsed_time = stop_time - start_time
    distance = (elapsed_time * 34300) / 2
    return distance

try:
    while True:
        distance = measure_distance()
        
        # Dynamic sound calculation based on distance
        # Here, we map the range 0-200 cm to a PWM duty cycle of 0-100%
        max_distance = 200
        sound = (1.0 - min(distance, max_distance) / max_distance) * 100
        
        pwm.ChangeDutyCycle(sound)
            
        print(f"Distance: {distance} cm, Sound: {sound}%")
        time.sleep(0.5)
        
except KeyboardInterrupt:
    print("Measurement stopped by user.")
    pwm.stop()
    GPIO.cleanup()